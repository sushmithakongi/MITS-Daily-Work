1.Longest palindromic substring

Given a string s, return the longest 
palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

Source Code:

def longestPalindrome(self, s: str) -> str:
        l=len(s)
        dp=[[0]*l for _ in range(l)]
        for i in range(l):
            dp[i][i]=1
            long_pal=s[i]
        for start in range(l-1,-1,-1):
            for end in range(start+1,l,1):
                if s[start]==s[end]:
                    if end-start==1 or dp[start+1][end-1]==1:
                        dp[start][end]=1
                        if len(long_pal) < len(s[start:end+1]):
                            long_pal = s[start:end+1]
        return long_pal

2.Pascal's Triangle
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]

Source Code:

def generate(self, numRows: int) -> List[List[int]]:
        res=[[1]*i for i in range(1,numRows+1)]
        print(res)
        for i in range(numRows):
            for j in range(1,i):
                res[i][j]=res[i-1][j-1]+res[i-1][j]
        return res              
        