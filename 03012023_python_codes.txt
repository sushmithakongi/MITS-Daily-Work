1. Reward K students

You are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.

Initially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.

You are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique.

Given an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.

 

Example 1:

Input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is studious","the student is smart"], student_id = [1,2], k = 2
Output: [1,2]
Explanation: 
Both the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher.
Example 2:

Input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is not studious","the student is smart"], student_id = [1,2], k = 2
Output: [2,1]
Explanation: 
- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. 
- The student with ID 2 has 1 positive feedback, so he has 3 points. 
Since student 2 has more points, [2,1] is returned.


source code:

class Solution:
    def topStudents(self, p: List[str], n: List[str], r: List[str], si: List[int], k: int) -> List[int]:
        p,n=set(p),set(n)
        d={i:0 for i in si}
        e={j:si[i] for i,j in enumerate(r)}
        for i in r:
            a=e[i]
            for j in i.split():
                if j in p:
                    d[a]+=3
                elif j in n:
                    d[a]-=1
        q=sorted(si)[::-1]
        return sorted(q,key=lambda x:d[x])[::-1][:k]

2 Take K of Each Character From Left and Right
 
You are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. Each minute, you may take either the leftmost character of s, or the rightmost character of s.

Return the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.

 

Example 1:

Input: s = "aabaaaacaabc", k = 2
Output: 8
Explanation: 
Take three characters from the left of s. You now have two 'a' characters, and one 'b' character.
Take five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters.
A total of 3 + 5 = 8 minutes is needed.
It can be proven that 8 is the minimum number of minutes needed.
Example 2:

Input: s = "a", k = 1
Output: -1
Explanation: It is not possible to take one 'b' or 'c' so return -1.

source code:
class Solution:
    def takeCharacters(self, s: str, k: int) -> int:
        d={}
        t={}
        for i in 'abc':
            t[i]=0
            d[i]=0
        for i in s:
            d[i]+=1
        e={i:d[i]-k for i in 'abc'}
        for i in e.values():
            if i<0:
                return -1
        l=ans=0
        for i,j in enumerate(s):
            t[j]+=1
            while t[j]>e[j]:
                t[s[l]]-=1
                l+=1
            ans=max(ans,i-l+1)
        return len(s)-ans


        


