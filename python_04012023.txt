1.Jump Game

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

Source Code:

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        
        
        n=len(nums)
        if nums[0]==0 and n!=1:
            return False
        cur=nums[0]
        for i in range(1,n-1):
            cur=max(cur-1,nums[i])
            if cur==0:
                return False
        return True
        
                
            
2.

Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

 

Example 1:


Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []
Example 3:

Input: head = [7,7,7,7], val = 7
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head: Optional[ListNode], val: int) -> Optional[ListNode]:
        prev=None
        cur=head
        while(cur and cur.val==val):
            cur=cur.next
        head=cur
        while(cur):
            if(cur.val==val):
                prev.next=cur.next
                cur=cur.next
                continue
            prev=cur
            cur=cur.next
        return head
        
        
                
        