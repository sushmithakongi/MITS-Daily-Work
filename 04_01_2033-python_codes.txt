1  Minimum Number of Operations to Make Array Continuous


You are given an integer array nums. In one operation, you can replace any element in nums with any integer.

nums is considered continuous if both of the following conditions are fulfilled:

All elements in nums are unique.
The difference between the maximum element and the minimum element in nums equals nums.length - 1.
For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.

Return the minimum number of operations to make nums continuous.

 

Example 1:

Input: nums = [4,2,5,3]
Output: 0
Explanation: nums is already continuous.
Example 2:

Input: nums = [1,2,3,5,6]
Output: 1
Explanation: One possible solution is to change the last element to 4.
The resulting array is [1,2,3,5,4], which is continuous.
Example 3:

Input: nums = [1,10,100,1000]
Output: 3
Explanation: One possible solution is to:
- Change the second element to 2.
- Change the third element to 3.
- Change the fourth element to 4.
The resulting array is [1,2,3,4], which is continuous.



source code:


import sys
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        u=len(nums)
        arr=sorted(set(nums))
        n=len(arr)
        out=sys.maxsize
        for i,j in enumerate(arr):
            l=i
            r=n-1
            se=j+u-1
            ans=i
            while l<=r:
                m=(l+r)//2
                if arr[m]<=se:
                    ans=m
                    l=m+1
                else:
                    r=m-1
            out=min(out,u-(ans-i+1))
        return out


2. Split Array Largest Sum


Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9


source code:
 
class Solution:
    def splitArray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        def p(summ,k):
            s=1
            d=0
            for i in nums:
                d+=i
                if d>summ:
                    s+=1
                    d=i
            return s<=k
        l,r=max(nums),sum(nums)
        ans = r+1
        while l<=r:
            m=(l+r)//2
            if p(m,k):
                ans=m
                r=m-1
            else:
                l=m+1
        return ans

 