1.Delete the Middle Node of a Linked List

You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.

The middle node of a linked list of size n is the ⌊n / 2⌋th node from the start using 0-based indexing, where ⌊x⌋ denotes the largest integer less than or equal to x.
Source Code:

def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None or head.next is None:
            return None
        if head.next.next is None:
            head.next=None
            return head
        fast=head.next.next
        slow=head
        while(fast and fast.next):
            fast=fast.next.next
            slow=slow.next
        slow.next=slow.next.next
        return head

2.Coin Change

You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

Source Code:
def coinChange(self, coins: List[int], amount: int) -> int:
        dp=[0]*(amount+1)
        for i in range(1,amount+1):
            dp[i]=math.inf
            for coin in coins:
                if i>=coin:
                    noOfCoins=dp[i-coin]+1
                    if noOfCoins<dp[i]:
                        dp[i]=noOfCoins
        return dp[amount] if dp[amount]!=math.inf else -1
                