1.Longest Valid Parenthesis

Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

SourceCode:

class Solution:
    def longestValidParentheses(self, s: str) -> int:
        n=len(s)
        dp=[0 for _ in range(n)]
        stk=[]
        l=0
        for i in range(n):
            if s[i]=="(":
                stk.append(i)
                l+=1
            elif l>0:
                dp[i],dp[stk.pop()]=1,1
                l-=1
        #rint(dp)
        GRes=0
        LRes=0
        for i in dp:
            if i==1:
                LRes+=1
            else:
                GRes=max(GRes,LRes)
                LRes=0
        return max(GRes,LRes)

2.Minimum Cost to Make Array Equal

You are given two 0-indexed arrays nums and cost consisting each of n positive integers.

You can do the following operation any number of times:

Increase or decrease any element of the array nums by 1.
The cost of doing one operation on the ith element is cost[i].

Return the minimum total cost such that all the elements of the array nums become equal.

 

Example 1:

Input: nums = [1,3,5,2], cost = [2,3,1,14]
Output: 8
Explanation: We can make all the elements equal to 2 in the following way:
- Increase the 0th element one time. The cost is 2.
- Decrease the 1st element one time. The cost is 3.
- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.
The total cost is 2 + 3 + 3 = 8.
It can be shown that we cannot make the array equal with a smaller cost.
Example 2:

Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]
Output: 0
Explanation: All the elements are already equal, so no operations are needed.
 

Constraints:

n == nums.length == cost.length
1 <= n <= 105
1 <= nums[i], cost[i] <= 106

Source Code:

class Solution:
    def minCost(self, nums: List[int], cost: List[int]) -> int:
        n=len(nums)
        arr=[[nums[i],cost[i]] for i in range(n)]
        arr.sort(key=lambda x: x[0])
        front=[0 for _ in range(n)]
        rare=[0 for _ in range(n)]
        curr=0
        result=math.inf
        for i in range(n-1):
            curr+=arr[i][1]
            front[i+1]=front[i]+curr*(arr[i+1][0]-arr[i][0])
        curr=0
        print(front)
        for i in range(n-1,0,-1):
            curr+=arr[i][1]
            rare[i-1]=rare[i]+curr*(arr[i][0]-arr[i-1][0])
            result=min(result,rare[i]+front[i])
        print(rare)
        return result
        